###
# tags: [ Review ]
# summary: Retrieves and claims a review needed Task
# produces: [ application/json ]
# description: Retrieves a Task and claims that task for review
# responses:
#   '200':
#     description: The task
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task to fetch and claim
###
GET     /task/:id/review/start                       @org.maproulette.controllers.api.TaskReviewController.startTaskReview(id:Long)
###
# tags: [ Review ]
# summary: Cancels a claim on a task for review
# produces: [ application/json ]
# description: Cancels a claim on a task for review
# responses:
#   '200':
#     description: The task
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task to cancel claim on
###
GET     /task/:id/review/cancel                       @org.maproulette.controllers.api.TaskReviewController.cancelTaskReview(id:Long)
###
# tags: [ Review ]
# summary: Retrieves tasks that need review
# produces: [ application/json ]
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of tasks that need review (and that the user has group permission to access)
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is -1 (all).
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
###
GET     /tasks/review                          @org.maproulette.controllers.api.TaskReviewController.getReviewRequestedTasks(startDate: String ?= null, endDate: String ?= null, onlySaved: Boolean ?= false, limit:Int ?= -1, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC", excludeOtherReviewers: Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves reviewed tasks that have been reviewed either by this user or where the user requested
#          the review.
# produces: [ application/json ]
# description: Retrieves list of Tasks
# responses:
#   '200':
#     description: The list of tasks and total count
#     description: The list of tasks
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: mappers
#     in: query
#     description: The mapper ids to search by. (review_requested_by)
#   - name: reviewers
#     in: query
#     description: The reviewer ids to search by. (review_requested_by)
#     in: query
#     description: Whether results should be included tasks in tasks 'review requested'
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is -1 (all).
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
#   - name: r
#     in: query
#     description: The search string used to match the Reviewer names. (reviewed_by)
###
GET     /tasks/reviewed                          @org.maproulette.controllers.api.TaskReviewController.getReviewedTasks(mappers:String ?= "", reviewers:String ?= "", startDate: String ?= null, endDate: String ?= null, allowReviewNeeded:Boolean ?= false, limit:Int ?= 10, page:Int ?= 0, sort:String ?= "", order:String ?= "ASC")
###
# tags: [ Review ]
# summary: Retrieves and claims a the next review needed Task
# produces: [ application/json ]
# description: Retrieves the next Task (given the search parameters) and claims that task for review
# responses:
#   '200':
#     description: The task
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: sort
#     in: query
#     description: Sorts the results retuned in the response. Parameter is optional, if not provided then results will not be sorted.
#   - name: order
#     in: query
#     description: Sort order direction. Either ASC or DESC. Default is "ASC" (ascending)
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: lastTaskId
#     in: query
#     description: Fetch the next task after the lastTaskId. (so if you want to 'skip' a task you can get the next one)
#   - name: cs
#     in: query
#     description: The search string used to match the Challenge names. Default value is empty string, ie. will match all challenges.
#   - name: o
#     in: query
#     description: The search string used to match the name of the person requesting the review. (review_requested_by)
#   - name: r
#     in: query
#     description: The search string used to match the Reviewer names. (reviewed_by)
###
GET     /tasks/review/next                       @org.maproulette.controllers.api.TaskReviewController.nextTaskReview(onlySaved:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", lastTaskId:Long ?= -1, excludeOtherReviewers:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves tasks that need review
# produces: [ application/json ]
# description: Retrieves list of Tasks and total count
# responses:
#   '200':
#     description: The list of tasks that need review (and that the user has group permission to access)
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: mappers
#     in: query
#     description: the mapper ids to search by (review_requested_by)
#   - name: reviewers
#     in: query
#     description: the reviewer ids to search by (reviewed_by)
#   - name: priorities
#     in: query
#     description: the priorities to search by
#   - name: startDate
#     in: query
#     description: Whether results should be tasks that have been reviewed after this date (format 'YYYY-MM-DD')
#   - name: endDate
#     in: query
#     description: Whether results should be tasks that have been reviewed before this date (format 'YYYY-MM-DD')
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
#   - name: includeByPriority
#     in: query
#     description: Also include a breakdown of review status by priority
###
GET     /tasks/review/metrics                          @org.maproulette.controllers.api.TaskReviewController.getReviewMetrics(reviewTasksType: Int, mappers: String ?= "", reviewers: String ?= "", priorities:String ?= "", startDate: String ?= null, endDate: String ?= null, onlySaved:Boolean ?= false, excludeOtherReviewers: Boolean ?= false, includeByPriority:Boolean ?= false)
###
# tags: [ Review ]
# summary: Retrieves task review clusters
# produces: [ application/json ]
# description: Retrieves task clusters that contain the centroid location for a group of review tasks
# responses:
#   '200':
#     description: An array of task clusters that represents clusters of tasks for the review criteria. If none found will return an empty list
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.TaskCluster'
# parameters:
#   - name: reviewTasksType
#     in: query
#     description: integer value > 1 - To Be Reviewed 2 - User's reviewed Tasks 3 - All reviewed by users
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
#   - name: startDate
#     in: query
#     description: The start date to search within
#   - name: endDate
#     in: query
#     description: The end date to search within
#   - name: onlySaved
#     in: query
#     description: Only show challenges that have been saved.
#   - name: excludeOtherReviewers
#     in: query
#     description: exclude tasks that have been reviewed by someone else
###
GET     /taskCluster/review                                @org.maproulette.controllers.api.TaskReviewController.getReviewTaskClusters(reviewTasksType:Int, points:Int ?= 100, startDate: String ?= null, endDate: String ?= null, onlySaved:Boolean ?= false, excludeOtherReviewers:Boolean ?= false)
###
# tags: [ Keyword ]
# summary: Create a Keyword
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create a new Keyword from the supplied JSON in the body. When creating the Task, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Keyword with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
#   '304':
#     description: Not updated responding with empty payload if Survey already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
###
POST    /keyword                                    @org.maproulette.controllers.api.TagController.create
###
# tags: [ Tag (Deprecated) ]
###
POST    /tag                                        @org.maproulette.controllers.api.TagController.create
###
# tags: [ Keyword ]
# summary: Create a batch of Keywords
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will create multiple new Keyword from the JSONArray supplied in the body. Each JSON object
#               is basically a Keyword object that is processed similarly to the singular /keyword POST. If
#               Keywords already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Keyword already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
###
POST    /keywords                                   @org.maproulette.controllers.api.TagController.batchUploadPost
###
# tags: [ Tag (Deprecated) ]
###
POST    /tags                                       @org.maproulette.controllers.api.TagController.batchUploadPost
###
# tags: [ Keyword ]
# summary: Updates a Keyword
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update an already existing Keyword from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Keyword
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
#   '304':
#     description: Not updated responding with empty payload if Keyword already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Keyword that is being updated
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
###
PUT     /keyword/:id                                @org.maproulette.controllers.api.TagController.update(id:Long)
###
# tags: [ Tag (Deprecated) ]
###
PUT     /tag/:id                                    @org.maproulette.controllers.api.TagController.update(id:Long)
###
# tags: [ Keyword ]
# summary: Update a batch of Keywords
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Will update multiple already existing Keywords from the JSONArray supplied in the body. Each JSON object
#               is basically a Keyword object that is processed similarly to the singular /keyword POST. If a Keyword
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Keyword already exists and nothing to update
#   '400':
#     description: Invalid json payload for Keyword
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the Keyword body.
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
###
PUT     /keywords                                   @org.maproulette.controllers.api.TagController.batchUploadPut
###
# tags: [ Tag (Deprecated) ]
###
PUT     /tags                                       @org.maproulette.controllers.api.TagController.batchUploadPut
###
# tags: [ Keyword ]
# summary: Retrieves an already existing Keyword
# produces: [ application/json ]
# description: Retrieves an already existing Keyword based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Keyword
#     schema:
#       $ref: '#/definitions/org.maproulette.models.Tag'
#   '404':
#     description: ID field supplied but no Keyword found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Keyword to retrieve
###
GET     /keyword/:id                                @org.maproulette.controllers.api.TagController.read(id:Long)
###
# tags: [ Tag (Deprecated) ]
###
GET     /tag/:id                                    @org.maproulette.controllers.api.TagController.read(id:Long)
###
# tags: [ Keyword ]
# summary: Deletes an existing Keyword
# description: Deletes an existing Keyword based on the supplied ID.
# responses:
#   '200':
#     description: A status message containing the ID of the Keyword that was just deleted
#     schema:
#       $ref: '#/definitions/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Keyword found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the Keyword being deleted
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
###
DELETE  /keyword/:id                                @org.maproulette.controllers.api.TagController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Tag (Deprecated) ]
###
DELETE  /tag/:id                                    @org.maproulette.controllers.api.TagController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Keyword ]
# summary: Finds Keywords
# produces: [ application/json ]
# description: Retrieves existing Keywords based on a prefix for the Keyword. So if search for "tes" will retrieve all Keywords that start with "tes", like "tester", "testing", "test". The search string is case insensitive.
# responses:
#   '200':
#     description: The retrieved Keywords
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Tag'
# parameters:
#   - name: prefix
#     in: query
#     description: The prefix for the Keywords you are looking for
#   - name: tagType
#     in: query
#     description: Optional limit tags to a specific tagType ('challenges' or 'tasks')
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /keywords                                   @org.maproulette.controllers.api.TagController.getTags(prefix: String ?= "", tagType: String ?= "", limit: Int ?= 10, page: Int ?= 0)
###
# tags: [ Tag (Deprecated) ]
###
GET     /tags                                       @org.maproulette.controllers.api.TagController.getTags(prefix: String ?= "", tagType: String ?= "", limit: Int ?= 10, page: Int ?= 0)
### NoDocs ###
GET     /snapshot/challenge/:challengeId/record     @org.maproulette.controllers.api.SnapshotController.recordChallengeSnapshot(challengeId:Long)
### NoDocs ###
GET     /snapshot/challenge/:challengeId/list       @org.maproulette.controllers.api.SnapshotController.getChallengeSnapshotList(challengeId:Long, includeAllData:Boolean ?= false)
### NoDocs ###
GET     /snapshot/challenge/:challengeId/export     @org.maproulette.controllers.api.SnapshotController.exportChallengeSnapshots(challengeId:Long)
### NoDocs ###
GET     /snapshot/:snapshotId                       @org.maproulette.controllers.api.SnapshotController.getChallengeSnapshot(snapshotId:Long)
###
# tags: [ Changes ]
# summary: Test Changes
# description: Takes in a group of changes and instead of submitting them to OSM will return a standard OSMChange XML that would have been submitted to the OSM servers
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: groupType
#     in: query
#     description: delta to return a delta version of the changes that would be applied. osmchange for the actual OSMChange value that would be applied to the OSM servers
#   - name: body
#     in: body
#     description: The tag changes
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.services.osm.ChangeObjects.TagChange'
###
POST    /change/tag/test                            @org.maproulette.controllers.OSMChangesetController.testTagChange(changeType:String ?= "delta")
###
# tags: [ Changes ]
# summary: Test OSM changes (currently only node creation or tag changes)
# description: Takes in a set of changes and, instead of submitting them to OSM, will return a standard OSMChange XML that would have been submitted to the OSM servers
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: body
#     in: body
#     description: The nodes to be created
#     required: true
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.services.osm.ChangeObjects.Change'
###
POST    /change/test                        @org.maproulette.controllers.OSMChangesetController.testChange()
###
# tags: [ Changes ]
# summary: Apply Tag Changes for task
# description: Submit a group of changes to OSM. Will return a standard OSMChange XML that has been applied to the OSM servers
# responses:
#   '200':
#     description: Ok with a standard message
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: taskId
#     in: query
#     description: The task id that should be marked as fixed after this tag change has been applied.
#   - name: comment
#     in: query
#     description: A task comment to be stored in map roulette with this change.
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     in: query
#     description: A list of mrTags to be stored with the task
#   - name: body
#     in: body
#     description: The TagChangeSubmission
#     required: true
#     schema:
#       type: object
#       $ref: '#/definitions/org.maproulette.services.osm.ChangeObjects.TagChangeSubmission'
###
POST    /task/:taskId/fix/apply                     @org.maproulette.controllers.api.TaskController.applyTagFix(taskId:Long, comment:String ?= "", tags:String ?= "")
###
# tags: [ Bundle ]
# summary: Create a task bundle
# consumes: [ application/json ]
# produces: [ application/json ]
# description: Create a new task bundle with the task ids in the supplied JSON body.
# responses:
#   '200':
#     description: The newly created bundle with a unique id.
#     schema:
#       $ref: '#/definitions/org.maproulette.models.TaskBundle'
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: apiKey
#     in: header
#     description: The user's apiKey to authorize the request
#     required: true
#     type: string
#   - name: body
#     in: body
#     description: The JSON structure for the bundle body.
#     required: true
#     schema:
#       $ref: '#/definitions/org.maproulette.models.TaskBundle'
###
POST    /taskBundle                                 @org.maproulette.controllers.api.TaskBundleController.createTaskBundle
### NoDocs ###
GET     /taskBundle/:id                             @org.maproulette.controllers.api.TaskBundleController.getTaskBundle(id:Long)
### NoDocs ###
DELETE     /taskBundle/:id                          @org.maproulette.controllers.api.TaskBundleController.deleteTaskBundle(id:Long, primaryId:Option[Long])
### NoDocs ###
GET        /taskBundle/:id/unbundle                 @org.maproulette.controllers.api.TaskBundleController.unbundleTasks(id:Long, taskIds:List[Long])
### NoDocs ###
POST    /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
PUT     /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
GET     /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
DELETE  /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
### NoDocs ###
HEAD    /*path                                      @org.maproulette.controllers.api.APIController.invalidAPIPath(path)
