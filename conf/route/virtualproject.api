###
# tags: [ Project ]
# summary: Add Challenge to a virtual Project
# produces: [ application/json ]
# description: Will add a challenge into a virtual project
# responses:
#   '200':
#     description: Empty status body
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.framework.model.Project'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#   - name: projectId
#     in: path
#     description: The ID of the project you are adding the challenge to.
###
POST     /project/:projectId/challenge/:id/add           @org.maproulette.framework.controller.VirtualProjectController.addChallenge(projectId:Long, id:Long)
###
# tags: [ Project ]
# summary: Remove Challenge from a virtual Project
# produces: [ application/json ]
# description: Will remove a challenge from a virtual project
# responses:
#   '200':
#     description: Empty status body
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.framework.model.Project'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the challenge
#   - name: projectId
#     in: path
#     description: The ID of the project you are removeing the challenge from.
###
POST     /project/:projectId/challenge/:id/remove           @org.maproulette.framework.controller.VirtualProjectController.removeChallenge(projectId:Long, id:Long)
###
# tags: [ Project ]
# summary: Retrieves random Task
# produces: [ application/json ]
# description: Retrieves a random Task based on the search criteria and contained within the current project
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     schema:
#       type: array
#       items:
#         type: object
#         $ref: '#/definitions/org.maproulette.models.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project limiting the tasks to only a descendent of that project.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /project/:id/tasks                          @org.maproulette.framework.controller.ProjectController.getRandomTasks(id:Long, limit:Int ?= 1, proximity:Long ?= -1)
